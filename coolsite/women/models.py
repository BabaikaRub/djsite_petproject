from django.db import models

# Create your models here.

"""https://djbook.ru/rel3.0/contents.html"""

"""Для того, чтобы посмотреть содержание SQL запроса при миграции, используется следующая команда:
    python manage.py sqlmigrate {название модели} {код миграции из папки migrations}"""

"""Для работы с ORM Django нужно в консоли набрать команду: python manage.py shell
    Чтобы завершить работу: exit()
    
    При работе в shell, переменная, которая сохраняет последнее действие: _"""

"""Основные команды при работе с ORM Django
    После создания объекта для занесения в БД, можно оперировать всеми его значениями через ссылку

    <объект>.save() - сохранить (занести) данные в таблицу БД -> w1.save()
    чтобы сразу одновременно создать запись и закинуть ее в бд используется класс Manager
    нужно написать: <имя модели>.objects.create(параметры модели)
    
    <имя модели>.objects.all() - выбрать все записи из БД
    
    <имя модели>.objects.filter(условие) - отфильтровать данные из БД по конкретному условию
    чтобы отфильтровать по условию >= или <=, нужно к параметру дабавить 
    >= __gte -> id__gte=2
    <= __lte -> id__lte=2
    
    <имя модели>.objects.exclude(условие) - выбирает все записи, которые не соответсвуют условию
    
    <имя модели>.objects.get(pk=значение) - получить значение конкретной записи по pk
    если мы попытаемся вывести больше, чем 1 запись, то сгенерится исключение

    чтобы дополнительно при выборке отсортировать значения используется метод
    <имя модели>.objects.filter(условие).order_by(параметр) - метод order_by можно использовать и отдельно
    если мы хотим отсортировать в обратном порядке, нужно поставить "-" перед параметром, по которому будем сортировать 
    ('-time_update') - пример

    чтобы изменить уже существующую запись, надо присвоить переменной ссылку на нее, используя метод get(),
    затем изменить параметры и сохранить с помощью метода save()

    чтобы удалить запись, используется метод delete(), при этом можно удалять не только одну запись, а сразу несколько
    """

# Название класса модели в дальнейшем соответствует названию таблицы в SQL
class Women(models.Model):
    # Поле id, которое задает порядковый номер, автоматически прописано в родителе Model

    title = models.CharField(max_length=255) # ссылка на экземпляр класса CharField (определяет текстовое поле)
    content = models.TextField(blank=True) # параметр blank говорит о том, что поле может быть пустым

    # Для того, чтобы Django мог загружать фото по данному пути, нужно определить две константы MEDIA_ROOT и MEDIA_URL в settings
    photo = models.ImageField(upload_to='photos/%Y/%m/%d/') # поле, в которое будем загружать фото. Можно указать шаблон загрузки

    time_create = models.DateTimeField(auto_now_add=True) # данное поле будет принимать текущее время
    # в момент добавления новой записи и больше никогда не меняться. Благодаря auto_now_add

    time_update = models.DateTimeField(auto_now=True) # для этого поля время будет меняться каждый раз, 
    # когда мы что-то меняем в этой записи

    is_published = models.BooleanField(default=True)

    # перегрузим метод __str__ для того, чтобы корректно выводить название каждой записи в QuerySet и админке
    def __str__(self):
        return self.title
